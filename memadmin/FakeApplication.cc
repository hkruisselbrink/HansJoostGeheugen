//#ident	"@(#)FakeApplication.cc	2.1	AKK	20110303"
/** @file FakeApplication.cc
 * De implementatie van FakeApplication.
 */

// Unix/Linux includes
#include <cstdlib>			// srand(3), rand(3), exit(2)

// Our own includes
#include "main.h"			// common global stuff
#include "Stopwatch.h"		// De cpu tijd meter
#include "FakeApplication.h"	// De pseudo applicatie

// introduce std shorthands
using std::cout;
using std::cerr;
using std::endl;

// ===================================================================

/// Een, globale, hulp functie die de kans berekent
/// dat de applicatie geheugenruimte wil aanvragen.
inline // deze 'inline' is alleen maar wat extra optimalisatie
bool	vraagkans(int r)
{
    return (((r >> 5) % 16) < 7);
    // De "vraag" kans is 7 op 16.
    // N.B. Bij veel 'random' generatoren zijn de laatste
    // bitjes niet even random als de rest. Daarom kijken
    // we hier naar een paar bitjes "halverwege" de
    // gegeven 'r' en niet naar de "laatste" bitjes.
    //		>> = schuif bitjes naar rechts
    //		%  = modulo = rest na deling
}

// ------------------------------------------------------


// Initieer een "FakeApplication" die geheugen vraagt aan
// de gegeven beheerder, waarbij we de beschikking
// hebben over 'size' eenheden geheugen.
FakeApplication::FakeApplication(Allocator *beheerder, int size)
    : beheerder(beheerder), size(size)
    , vflag(false), tflag(true)
    , err_teller(0), oom_teller(0)
{
    // nooit iets geloven ...
    require(beheerder != 0);
    require(size > 0);
}


// actie: na afloop alles netjes opruimen.
FakeApplication::~FakeApplication()
{
    vflag = false; // svp het opruimen in stilte doen
    // zijn er nog objecten over?
    while (!objecten.empty())
    {
        vergeetOudste();
    }
}


// actie: vraag om geheugen (onze versie van 'new')
void	FakeApplication::vraagGeheugen(int omvang)
{
    if (vflag)
    {
        cout << "Vraag " << omvang << ", ";
    }

    // Deze interne controle overslaan als we aan het testen zijn.
    if (!tflag)
    {
        require((0 < omvang) && (omvang <= size));	// is de 'omvang' wel geldig ?
    }

    // Vraag om geheugen
    // Vraag om geheugen
    Area  *ap = beheerder->alloc(omvang);

    if (ap == 0)    // Allocator out of memory?
    {
        if (vflag)
        {
            cout << AC_RED"out of memory"AA_RESET << endl;
        }
        ++oom_teller;	// out-of-memory teller bijwerken
        return;
    }
    if (vflag)
    {
        cout << "kreeg " << (*ap) << endl;
    }

    // Nu moeten we eerst controlen of er geen overlap
    // bestaat met wat we al eerder hadden gekregen ...
    ALiterator  i;
    for (i = objecten.begin() ; i != objecten.end() ; ++i)
    {
        Area  *xp = *i;				// m.a.w. objecten[ i ]
        if (ap->overlaps(xp))       // Oeps!
        {
            // Dit zou eigenlijk een "fatal error" moeten zijn,
            // maar bij de RandomFit zal dit wel vaker gebeuren
            // dus voorlopig alleen maar melden dat het fout is ...
            if (vflag)
            {
                cout << AC_RED"Oeps, het nieuwe gebied overlapt met " << (*xp) << AA_RESET << endl;
            }
            ++err_teller;	// fouten teller bijwerken
            break;			// verder zoeken is niet meer zo zinvol ...
            // ... en levert alleen maar meer uitvoer op.
        }
    }

    // Het gekregen gebied moeten we natuurlijk wel onthouden.
    objecten.push_back(ap);
}


// actie: geef een gekregen gebied weer terug (onze versie van 'delete')
void	FakeApplication::vergeetOudste()
{
    require(! objecten.empty());	// hebben we eigenlijk wel wat ?
    Area  *ap = objecten.front();	// het oudste gebied opzoeken
    if (vflag)
    {
        // vertel wat we gaan doen
        cout << "Vrijgeven " << (*ap) << endl;
    }
    objecten.pop_front();			// gebied uit de lijst halen
    beheerder->free(ap);			// en vrij geven
}


// Utility:
// Returns a random integer in the range
// from min (inclusive) upto max (exclusive)
inline
int randint(int min, int max)
{
    int  m = (max - min);	// bepaal bereik
    int  r = rand();
    r %= m;					// rest na deling
    return r + min;
}


// actie: geef een gekregen gebied weer terug (onze versie van 'delete')
void	FakeApplication::vergeetRandom()
{
    require(! objecten.empty());	// hebben we eigenlijk wel wat ?

    Area  *ap = objecten.front();	// het oudste gebied alvast opzoeken

    int  n = objecten.size();		// valt er wat te kiezen?
    if (n > 1)
    {
        int  m = randint(0, n);		// kies een index
        // en zoek dat element op
        ALiterator  i;
        for (i = objecten.begin() ; (m > 0) && (i != objecten.end()) ; ++i, --m)
        {
            ;
        }
        ap = *i;					// het slachtoffer
        objecten.erase(i);			// uit de lijst halen
    }
    else
    {
        objecten.pop_front();    // oudste gebied uit de lijst halen
    }

    if (vflag)
    {
        // vertel wat we gaan doen
        cout << "Vrijgeven " << (*ap) << endl;
    }

    beheerder->free(ap);			// en het gebied weer vrij geven
}

void FakeApplication::minderRandomScenario(int aantal, bool vflag)
{
    bool old_vflag = this->vflag;
    this->vflag = vflag;

    oom_teller = 0;			// reset failure counter
    err_teller = 0;			// reset error counter

    srand(1);   // (zie: man 3 rand)

    // Nu komt het eigenlijke werk:
    Stopwatch  klok;		// Een stopwatch om de tijd te meten
    klok.start();			// -----------------------------------

    int numbers[] = { 8, 6, 3, 6, 6, 4, 5, 8, 2, 4, 7, 2, 2, 3, 2, 8, 5, 4, 10, 9, 1, 9, 5, 9, 4, 3, 4, 3, 8, 7, 5, 5, 9, 8, 5, 2, 7, 4, 3, 10, 6, 6, 6, 7, 6, 7, 1, 4, 7, 2, 1, 6, 3, 5, 4, 10, 7, 2, 6, 5, 1, 9, 4, 5, 8, 9, 1, 10, 5, 9, 6, 5, 7, 6, 5, 6, 9, 6, 10, 6, 9, 7, 4, 7, 10, 4, 4, 6, 5, 3, 7, 8, 10, 3, 2, 4, 9, 9, 2, 2, 1, 5, 2, 4, 1, 9, 2, 6, 7, 6, 4, 6, 7, 2, 3, 5, 7, 6, 5, 4, 8, 9, 5, 5, 10, 1, 9, 10, 5, 5, 5, 1, 4, 10, 4, 3, 3, 9, 8, 3, 4, 7, 2, 3, 8, 8, 1, 2, 6, 9, 10, 4, 1, 1, 6, 7, 7, 1, 9, 4, 10, 7, 10, 3, 1, 2, 2, 4, 8, 5, 6, 6, 9, 7, 9, 7, 10, 3, 7, 5, 6, 1, 9, 4, 6, 10, 3, 10, 8, 1, 7, 3, 3, 9, 4, 1, 7, 5, 8, 10, 6, 1, 7, 6, 9, 8, 2, 10, 2, 8, 5, 1, 9, 8, 4, 9, 9, 1, 4, 5, 1, 10, 7, 7, 10, 3, 2, 8, 5, 1, 3, 9, 6, 2, 9, 2, 3, 1, 6, 1, 8, 8, 9, 2, 4, 2, 3, 1, 9, 7, 10, 9, 1, 6, 4, 1, 9, 4, 6, 1, 10, 6, 4, 7, 10, 4, 8, 6, 8, 6, 6, 4, 10, 2, 2, 7, 5, 4, 4, 5, 4, 8, 8, 7, 10, 10, 2, 10, 6, 2, 6, 1, 3, 3, 9, 3, 6, 5, 2, 9, 10, 3, 5, 6, 4, 3, 5, 1, 1, 4, 7, 3, 3, 7, 4, 1, 7, 9, 5, 7, 6, 2, 5, 6, 9, 10, 10, 9, 7, 6, 2, 1, 1, 8, 5, 3, 4, 2, 6, 4, 10, 10, 7, 7, 3, 1, 3, 8, 9, 10, 8, 6, 8, 1, 4, 3, 3, 9, 8, 3, 3, 5, 3, 7, 6, 7, 4, 9, 8, 9, 4, 1, 8, 1, 8, 8, 10, 1, 1, 2, 5, 1, 5, 7, 10, 6, 3, 9, 3, 6, 3, 4, 3, 9, 6, 10, 7, 9, 3, 8, 2, 9, 2, 7, 4, 6, 10, 3, 9, 8, 9, 6, 8, 6, 3, 9, 2, 5, 8, 2, 3, 5, 4, 8, 1, 8, 8, 6, 8, 6, 8, 8, 2, 1, 2, 8, 7, 3, 8, 10, 3, 4, 1, 7, 7, 6, 1, 2, 1, 1, 8, 4, 8, 5, 9, 3, 9, 10, 3, 3, 10, 6, 1, 8, 6, 4, 8, 1, 8, 5, 10, 5, 8, 8, 10, 9, 3, 6, 6, 8, 4, 2, 6, 4, 4, 4, 6, 5, 3, 2, 3, 7, 1, 7, 5, 3, 6, 9, 3, 1, 8, 8, 8, 6, 8, 10, 1, 8, 9, 1, 1, 5, 1, 2, 5, 10, 6, 6, 6, 4, 3, 4, 6, 4, 4, 1, 8, 7, 4, 8, 4, 1, 8, 2, 10, 7, 7, 4, 2, 8, 2, 4, 9, 9, 1, 10, 9, 8, 7, 1, 6, 3, 7, 7, 7, 10, 5, 1, 2, 9, 9, 6, 1, 4, 9, 3, 2, 6, 7, 2, 2, 5, 7, 7, 6, 6, 9, 9, 6, 2, 9, 2, 10, 5, 7, 1, 9, 5, 4, 1, 4, 4, 3, 2, 1, 4, 5, 4, 10, 3, 7, 10, 7, 7, 1, 5, 2, 2, 3, 5, 1, 6, 1, 3, 2, 10, 3, 3, 7, 5, 2, 1, 3, 9, 3, 5, 7, 9, 2, 1, 8, 1, 8, 5, 1, 4, 6, 2, 3, 6, 4, 7, 7, 4, 1, 3, 9, 8, 4, 2, 7, 6, 1, 3, 6, 2, 7, 10, 1, 8, 3, 8, 6, 8, 2, 3, 9, 2, 7, 2, 3, 5, 10, 6, 7, 2, 2, 7, 9, 7, 4, 2, 7, 2, 5, 7, 6, 9, 2, 6, 1, 6, 8, 7, 4, 5, 8, 7, 6, 7, 4, 10, 2, 8, 10, 3, 7, 6, 3, 6, 8, 4, 10, 6, 9, 1, 3, 7, 3, 10, 8, 9, 6, 4, 6, 6, 8, 8, 3, 10, 5, 4, 6, 4, 4, 10, 8, 1, 1, 4, 5, 9, 9, 1, 8, 3, 5, 3, 6, 10, 5, 2, 1, 4, 3, 3, 9, 4, 8, 3, 3, 10, 6, 9, 9, 10, 6, 3, 3, 9, 10, 6, 3, 2, 3, 6, 5, 8, 5, 7, 2, 8, 4, 8, 7, 6, 6, 3, 4, 2, 5, 1, 5, 6, 3, 6, 4, 2, 6, 9, 9, 5, 5, 2, 7, 4, 8, 2, 5, 10, 10, 7, 3, 5, 8, 5, 2, 7, 6, 10, 3, 4, 5, 8, 7, 5, 1, 8, 3, 10, 2, 8, 2, 8, 10, 6, 1, 3, 8, 5, 9, 2, 8, 3, 6, 7, 2, 7, 10, 7, 1, 9, 3, 2, 2, 10, 5, 2, 3, 8, 9, 2, 5, 8, 2, 3, 3, 4, 2, 3, 6, 3, 8, 5, 4, 8, 5, 2, 2, 9, 9, 3, 7, 5, 1, 2, 1, 3, 1, 2, 10, 10, 6, 10, 3, 5, 1, 1, 5, 6, 4, 6, 2, 4, 10, 9, 5, 1, 10, 5, 4, 6, 7, 7, 8, 5, 2, 1, 7, 1, 4, 2, 6, 1, 5, 3, 4, 7, 5, 3, 7, 7, 9, 9, 10, 7, 10, 5, 9, 10, 4, 4, 9, 10, 8, 2, 6, 4, 3, 1, 10, 7, 8, 3, 1, 6, 5, 9, 2, 1, 4, 3, 9, 1, 8, 2, 5, 2, 3, 10, 1, 10, 9, 7, 10, 1, 8, 5, 1, 8, 7, 3, 10, 4, 6, 5, 4, 4, 9, 4, 9, 3, 10, 10, 4, 10, 5, 5, 10, 1, 7, 4, 3, 10, 10, 2, 7, 1, 3, 4, 1, 8, 9, 9, 10, 3, 10, 7, 8, 6, 4, 10, 7, 7, 4, 3, 1, 1, 5, 6, 3, 5, 4, 10, 3, 7, 1, 1, 4, 6, 1, 4, 10, 9, 6, 9, 6, 2, 5, 2, 7, 8, 4, 9, 3, 10, 10, 3, 6, 5, 10, 1, 6, 10, 1, 6, 7, 4, 3, 7, 8, 9, 2, 9, 4, 1, 5, 10, 2, 3, 3, 2, 5, 8, 3, 8, 1, 7, 9, 3, 1, 8, 10, 1, 6, 4, 5, 6, 7, 9, 10, 2, 9, 6, 3, 5, 10, 9, 5, 1, 1, 2, 5, 6, 5, 5, 10, 5, 1, 1, 5, 1, 5, 3, 10, 9, 7, 10, 2, 3, 9, 8, 5, 8, 9, 4, 4, 7, 4, 10, 3, 10, 10, 5, 7, 6, 2, 6, 1, 6, 10, 2, 1, 2, 7, 9, 4, 9, 4, 4, 8, 2, 6, 4, 7, 3, 5, 5, 10, 8, 1, 8, 5, 8, 9, 10, 7, 2, 6, 6, 6, 1, 8, 9, 3, 9, 1, 1, 10, 10, 6, 2, 9, 5, 7, 8, 9, 1, 8, 1, 1, 4, 8, 10, 10, 5, 6, 7, 1, 9, 4, 8, 8, 6, 5, 7, 8, 5, 4, 4, 3, 3, 10, 7, 8, 10, 9, 3, 6, 3, 4, 5, 10, 4, 3, 5, 2, 8, 10, 5, 3, 6, 1, 8, 3, 6, 2, 8, 1, 9, 6, 4, 2, 2, 9, 5, 1, 1, 10, 10, 5, 7, 7, 5, 5, 1, 6, 1, 10, 7, 1, 8, 6, 1, 1, 10, 8, 5, 2, 5, 2, 6, 8, 5, 3, 6, 4, 2, 7, 5, 4, 7, 1, 9, 6, 5, 10, 4, 10, 5, 4, 3, 2, 8, 2, 2, 3, 3, 3, 1, 10, 9, 8, 4, 7, 6, 10, 4, 10, 1, 6, 7, 3, 1, 9, 9, 7, 5, 9, 10, 2, 4, 9, 1, 5, 6, 10, 3, 1, 1, 3, 2, 3, 5, 6, 10, 3, 7, 10, 6, 6, 2, 7, 5, 8, 5, 4, 1, 7, 7, 6, 10, 5, 10, 9, 3, 4, 4, 1, 1, 1, 4, 6, 2, 7, 1, 2, 5, 3, 6, 9, 8, 5, 7, 10, 5, 8, 7, 4, 7, 7, 4, 5, 6, 9, 10, 6, 9, 4, 10, 7, 1, 1, 10, 1, 2, 8, 9, 8, 5, 1, 5, 7, 2, 5, 7, 1, 7, 2, 7, 8, 5, 4, 9, 2, 5, 8, 1, 1, 2, 2, 9, 2, 9, 1, 8, 9, 6, 10, 2, 4, 6, 3, 5, 1, 4, 5, 4, 10, 4, 5, 6, 2, 4, 1, 4, 1, 6, 9, 3, 3, 1, 10, 1, 8, 9, 9, 5, 3, 8, 7, 4, 6, 9, 10, 7, 5, 7, 1, 10, 3, 5, 5, 10, 3, 6, 9, 5, 2, 2, 9, 9, 9, 2, 8, 6, 5, 10, 2, 6, 10, 4, 4, 9, 5, 8, 5, 8, 2, 3, 7, 9, 8, 10, 10, 9, 5, 3, 9, 6, 7, 8, 6, 8, 2, 2, 7, 9, 9, 2, 4, 5, 1, 8, 7, 1, 4, 4, 2, 6, 2, 2, 2, 2, 3, 7, 4, 1, 1, 6, 8, 3, 10, 8, 10, 9, 2, 9, 3, 10, 2, 3, 2, 7, 5, 6, 10, 6, 1, 10, 4, 2, 2, 4, 3, 1, 4, 7, 10, 4, 7, 5, 3, 7, 8, 9, 7, 6, 3, 8, 5, 7, 4, 1, 1, 3, 2, 2, 10, 10, 1, 9, 6, 7, 8, 5, 10, 4, 5, 2, 5, 6, 6, 5, 6, 9, 5, 9, 7, 6, 10, 5, 7, 1, 5, 9, 5, 3, 10, 9, 6, 7, 10, 2, 8, 7, 3, 2, 3, 10, 4, 4, 8, 3, 6, 2, 8, 10, 4, 4, 4, 10, 6, 3, 5, 10, 7, 9, 9, 8, 2, 5, 8, 4, 7, 1, 3, 5, 6, 1, 7, 3, 9, 7, 9, 5, 2, 2, 1, 10, 3, 2, 3, 6, 8, 9, 4, 8, 10, 10, 10, 1, 4, 4, 8, 8, 4, 1, 3, 4, 8, 4, 8, 3, 4, 8, 8, 10, 3, 3, 1, 9, 9, 7, 2, 1, 6, 10, 2, 1, 7, 9, 6, 2, 10, 3, 10, 3, 8, 5, 4, 6, 10, 3, 2, 5, 4, 1, 3, 3, 6, 6, 7, 9, 10, 2, 4, 8, 3, 7, 4, 6, 6, 1, 1, 4, 1, 8, 3, 3, 1, 1, 2, 8, 5, 6, 2, 5, 5, 7, 8, 7, 4, 3, 2, 5, 8, 3, 2, 9, 5, 10, 7, 2, 2, 8, 2, 8, 1, 7, 10, 9, 5, 10, 9, 3, 6, 6, 9, 5, 8, 1, 7, 4, 4, 5, 6, 8, 5, 4, 10, 7, 5, 10, 7, 10, 1, 5, 4, 5, 7, 8, 7, 10, 4, 8, 7, 7, 8, 3, 7, 6, 8, 10, 9, 5, 1, 6, 7, 1, 3, 3, 3, 7, 9, 1, 6, 8, 10, 10, 3, 5, 10, 9, 7, 6, 2, 3, 7, 5, 6, 5, 2, 4, 9, 1, 6, 4, 3, 8, 2, 10, 9, 5, 10, 5, 10, 3, 8, 1, 5, 3, 3, 9, 5, 8, 2, 5, 3, 10, 10, 6, 7, 8, 5, 9, 8, 6, 1, 8, 1, 6, 1, 5, 10, 6, 7, 10, 5, 6, 6, 4, 4, 4, 1, 10, 10, 7, 6, 5, 3, 4, 7, 2, 8, 10, 4, 9, 2, 8, 9, 6, 1, 8, 10, 4, 3, 3, 2, 5, 5, 4, 2, 5, 7, 1, 6, 2, 9, 3, 10, 8, 2, 5, 10, 10, 5, 6, 1, 1, 3, 10, 4, 3, 2, 8, 8, 5, 1, 5, 2, 7, 1, 4, 1, 4, 2, 3, 5, 2, 1, 4, 6, 3, 10, 1, 9, 7, 7, 6, 4, 6, 5, 3, 9, 9, 5, 2, 4, 1, 8, 5, 6, 10, 2, 2, 6, 5, 7, 10, 4, 4, 1, 2, 9, 6, 5, 6, 10, 7, 2, 3, 5, 9, 6, 10, 10, 6, 8, 2, 8, 5, 6, 8, 8, 3, 3, 4, 10, 8, 8, 1, 7, 1, 4, 9, 7, 3, 7, 7, 8, 1, 1, 10, 3, 8, 4, 7, 1, 6, 10, 2, 10, 1, 7, 2, 10, 1, 5, 2, 8, 8, 7, 5, 1, 8, 5, 3, 4, 7, 4, 9, 4, 6, 8, 8, 5, 10, 7, 5, 8, 2, 3, 6, 3, 1, 5, 10, 7, 6, 5, 2, 5, 5, 8, 9, 3, 4, 10, 9, 9, 2, 10, 6, 9, 1, 4, 2, 6, 6, 9, 5, 7, 6, 5, 5, 3, 5, 10, 10, 6, 3, 2, 9, 1, 2, 3, 10, 4, 10, 7, 9, 8, 6, 10, 4, 8, 7, 8, 2, 9, 8, 10, 6, 6, 4, 9, 9, 8, 7, 5, 10, 6, 1, 5, 1, 10, 3, 4, 2, 8, 4, 1, 7, 2, 2, 6, 4, 1, 4, 1, 9, 8, 10, 10, 5, 6, 3, 6, 2, 5, 2, 10, 10, 7, 8, 8, 6, 5, 4, 1, 2, 3, 10, 7, 3, 4, 4, 3, 2, 10, 4, 10, 7, 3, 2, 2, 3, 8, 7, 7, 1, 5, 8, 8, 7, 7, 7, 10, 4, 7, 6, 8, 9, 2, 7, 2, 7, 6, 6, 2, 3, 1, 10, 6, 10, 5, 6, 6, 2, 1, 4, 9, 1, 4, 1, 10, 9, 1, 9, 5, 1, 8, 7, 6, 2, 5, 9, 6, 10, 8, 1, 3, 2, 1, 7, 2, 9, 4, 7, 3, 1, 1, 4, 1, 6, 8, 6, 2, 4, 10, 8, 8, 7, 6, 3, 5, 4, 1, 8, 4, 4, 4, 9, 5, 3, 5, 4, 3, 10, 6, 8, 5, 1, 4, 2, 6, 7, 6, 3, 4, 4, 2, 7, 9, 9, 5, 2, 4, 5, 1, 2, 7, 9, 9, 2, 9, 7, 10, 6, 10, 2, 10, 5, 5, 7, 8, 1, 3, 6, 4, 3, 4, 3, 7, 9, 3, 3, 6, 3, 2, 8, 1, 6, 4, 3, 8, 5, 7, 9, 10, 1, 2, 2, 10, 10, 3, 4, 2, 6, 7, 5, 5, 2, 3, 4, 3, 4, 7, 1, 4, 10, 7, 10, 2, 9, 3, 10, 9, 2, 7, 6, 7, 5, 8, 10, 6, 3, 9, 6, 5, 9, 9, 5, 5, 4, 8, 1, 2, 1, 2, 3, 9, 5, 2, 6, 8, 10, 2, 1, 8, 7, 7, 5, 5, 7, 2, 6, 1, 6, 3, 8, 4, 1, 6, 10, 6, 9, 4, 7, 2, 5, 2, 9, 7, 7, 10, 9, 4, 3, 8, 8, 10, 6, 1, 7, 2, 9, 1, 5, 4, 10, 5, 3, 4, 9, 4, 1, 5, 7, 8, 1, 2, 10, 1, 4, 1, 8, 9, 7, 6, 5, 8, 3, 1, 4, 6, 2, 6, 9, 3, 7, 10, 9, 6, 4, 3, 5, 4, 5, 1, 7, 2, 8, 1, 3, 2, 4, 4, 8, 5, 7, 1, 9, 5, 4, 7, 8, 5, 1, 8, 7, 9, 6, 10, 9, 4, 8, 5, 8, 2, 7, 4, 7, 4, 1, 6, 1, 10, 3, 6, 10, 6, 10, 6, 1, 10, 3, 9, 9, 10, 3, 4, 4, 7, 2, 9, 1, 5, 3, 8, 3, 10, 8, 8, 2, 10, 4, 1, 7, 3, 3, 5, 6, 10, 5, 1, 4, 10, 8, 6, 7, 5, 5, 5, 9, 8, 7, 6, 8, 3, 4, 5, 4, 3, 2, 2, 10, 1, 10, 6, 1, 9, 6, 5, 8, 5, 1, 9, 9, 2, 2, 4, 1, 6, 2, 10, 7, 4, 3, 4, 7, 3, 9, 1, 10, 7, 6, 4, 9, 8, 1, 7, 5, 7, 6, 1, 9, 5, 2, 8, 4, 8, 5, 7, 10, 6, 10, 1, 10, 5, 9, 8, 2, 3, 10, 5, 4, 6, 8, 1, 6, 1, 9, 1, 7, 2, 2, 2, 5, 7, 1, 2, 8, 4, 5, 2, 2, 7, 2, 2, 5, 8, 5, 1, 6, 3, 1, 5, 4, 7, 2, 7, 3, 9, 8, 5, 2, 3, 6, 2, 2, 10, 7, 6, 2, 7, 4, 1, 5, 7, 3, 8, 7, 2, 7, 5, 10, 1, 8, 3, 7, 7, 8, 2, 2, 10, 2, 8, 8, 8, 6, 1, 4, 8, 5, 5, 2, 9, 8, 5, 7, 1, 4, 8, 6, 4, 7, 7, 6, 5, 6, 5, 6, 9, 3, 1, 3, 4, 6, 6, 7, 6, 7, 8, 10, 6, 4, 8, 1, 9, 8, 9, 10, 3, 8, 9, 1, 1, 7, 5, 4, 6, 3, 9, 3, 2, 1, 4, 9, 5, 2, 9, 2, 1, 10, 1, 4, 8, 7, 3, 2, 9, 8, 4, 9, 8, 10, 9, 1, 2, 6, 3, 2, 6, 10, 1, 1, 5, 9, 6, 2, 8, 2, 3, 3, 10, 7, 6, 8, 9, 9, 2, 3, 4, 2, 5, 5, 8, 8, 10, 2, 2, 2, 2, 2, 4, 4, 2, 5, 9, 4, 6, 8, 9, 4, 2, 10, 9, 5, 8, 9, 1, 6, 4, 5, 8, 8, 1, 2, 9, 9, 7, 1, 1, 7, 4, 7, 3, 7, 4, 5, 3, 5, 2, 10, 7, 1, 4, 9, 3, 6, 6, 5, 7, 9, 6, 9, 4, 4, 9, 9, 3, 4, 7, 1, 3, 9, 4, 1, 9, 6, 6, 4, 8, 3, 2, 8, 8, 7, 10, 9, 7, 6, 4, 8, 5, 1, 5, 10, 1, 8, 10, 3, 10, 10, 8, 5, 1, 8, 1, 9, 5, 7, 3, 5, 10, 4, 8, 7, 6, 1, 8, 9, 2, 6, 6, 5, 9, 10, 7, 2, 2, 1, 5, 1, 2, 2, 10, 7, 2, 2, 10, 5, 6, 4, 3, 3, 2, 1, 1, 5, 2, 2, 9, 4, 3, 4, 9, 10, 9, 3, 4, 4, 10, 3, 6, 3, 1, 8, 9, 9, 9, 2, 4, 5, 6, 5, 3, 2, 10, 8, 8, 6, 10, 3, 8, 6, 3, 7, 5, 7, 1, 1, 3, 9, 4, 6, 8, 5, 1, 9, 5, 3, 6, 10, 2, 6, 9, 4, 7, 3, 9, 7, 1, 10, 5, 5, 3, 6, 3, 2, 3, 9, 9, 3, 9, 1, 1, 4, 10, 5, 5, 6, 6, 8, 8, 4, 10, 8, 5, 8, 3, 7, 9, 7, 6, 7, 9, 8, 5, 5, 8, 4, 4, 4, 1, 4, 2, 9, 4, 9, 3, 10, 5, 6, 1, 8, 2, 6, 6, 3, 6, 1, 1, 10, 9, 10, 1, 6, 4, 9, 10, 3, 9, 2, 5, 6, 9, 9, 10, 5, 2, 2, 5, 8, 10, 8, 3, 3, 1, 2, 4, 5, 1, 6, 7, 5, 4, 5, 3, 1, 10, 10, 4, 4, 7, 8, 5, 9, 7, 1, 6, 6, 2, 3, 10, 7, 8, 8, 2, 2, 5, 7, 10, 4, 9, 8, 7, 5, 5, 3, 3, 1, 2, 5, 5, 1, 1, 9, 7, 2, 5, 10, 5, 6, 5, 6, 8, 4, 9, 1, 8, 8, 10, 5, 6, 3, 8, 2, 8, 5, 7, 8, 1, 6, 4, 8, 9, 10, 5, 5, 5, 4, 7, 9, 1, 7, 9, 1, 9, 1, 4, 2, 7, 4, 3, 8, 4, 3, 1, 7, 3, 7, 9, 6, 10, 10, 3, 8, 4, 7, 6, 4, 9, 8, 6, 7, 7, 7, 5, 6, 4, 2, 3, 10, 7, 1, 7, 2, 3, 6, 9, 9, 5, 3, 6, 6, 2, 8, 10, 9, 9, 6, 10, 8, 3, 8, 4, 5, 2, 5, 9, 2, 3, 2, 5, 6, 8, 3, 3, 7, 1, 2, 10, 1, 6, 2, 3, 6, 7, 8, 5, 3, 5, 7, 10, 9, 7, 4, 4, 10, 10, 4, 4, 7, 1, 7, 3, 9, 3, 8, 10, 10, 8, 1, 9, 2, 10, 3, 9, 10, 10, 6, 5, 7, 1, 2, 6, 10, 7, 10, 6, 2, 6, 5, 2, 1, 2, 1, 1, 7, 6, 9, 9, 1, 9, 7, 2, 7, 1, 5, 5, 2, 1, 6, 9, 2, 7, 6, 5, 9, 3, 7, 3, 4, 10, 6, 4, 2, 6, 9, 9, 1, 4, 5, 1, 6, 6, 7, 6, 7, 8, 1, 8, 2, 5, 2, 9, 8, 7, 4, 10, 8, 4, 8, 1, 9, 6, 10, 1, 2, 6, 7, 3, 2, 4, 5, 8, 3, 9, 1, 5, 6, 10, 1, 9, 10, 6, 1, 3, 8, 8, 8, 10, 10, 2, 4, 6, 6, 4, 1, 8, 10, 6, 7, 5, 5, 4, 4, 2, 8, 4, 5, 6, 9, 4, 4, 1, 3, 4, 2, 9, 1, 6, 3, 10, 2, 3, 9, 8, 2, 4, 6, 6, 10, 7, 3, 9, 9, 3, 6, 6, 8, 5, 10, 9, 9, 5, 1, 8, 7, 6, 7, 7, 4, 10, 3, 1, 6, 9, 9, 8, 1, 8, 6, 8, 8, 4, 2, 9, 10, 6, 4, 8, 9, 6, 2, 8, 3, 1, 10, 3, 10, 9, 4, 8, 2, 7, 5, 2, 3, 1, 10, 7, 10, 5, 1, 3, 2, 7, 7, 6, 5, 7, 7, 1, 5, 4, 2, 1, 10, 4, 4, 6, 4, 3, 9, 1, 4, 1, 8, 4, 9, 6, 4, 9, 8, 1, 3, 10, 2, 4, 3, 9, 7, 6, 3, 9, 6, 1, 8, 8, 10, 2, 4, 2, 5, 8, 2, 10, 3, 1, 4, 8, 8, 4, 8, 8, 8, 3, 6, 8, 10, 1, 10, 6, 5, 2, 10, 1, 6, 5, 6, 5, 10, 6, 6, 5, 2, 9, 4, 4, 1, 9, 8, 1, 8, 6, 1, 5, 3, 8, 4, 8, 5, 5, 7, 10, 10, 8, 3, 7, 9, 6, 1, 2, 5, 9, 5, 2, 3, 2, 2, 10, 3, 8, 7, 2, 4, 2, 10, 5, 10, 8, 5, 3, 1, 8, 7, 10, 7, 4, 2, 4, 8, 3, 4, 8, 8, 10, 8, 6, 4, 3, 1, 8, 6, 4, 2, 2, 10, 10, 3, 6, 1, 6, 5, 1, 2, 9, 10, 2, 4, 8, 5, 3, 1, 3, 10, 5, 10, 3, 5, 4, 9, 7, 5, 1, 8, 4, 2, 6, 4, 1, 4, 3, 5, 1, 10, 2, 6, 3, 10, 7, 2, 7, 4, 5, 3, 4, 4, 2, 6, 10, 7, 1, 4, 5, 8, 9, 9, 7, 9, 8, 10, 10, 9, 3, 7, 1, 6, 1, 1, 9, 7, 9, 6, 6, 1, 9, 7, 7, 1, 1, 10, 5, 3, 8, 7, 5, 10, 2, 2, 9, 7, 9, 4, 5, 7, 8, 1, 6, 3, 10, 2, 6, 5, 4, 2, 7, 2, 8, 2, 2, 2, 10, 3, 2, 5, 2, 3, 9, 4, 4, 1, 7, 5, 3, 5, 4, 3, 7, 5, 5, 2, 10, 1, 3, 7, 10, 1, 1, 3, 7, 2, 3, 7, 10, 10, 5, 8, 4, 8, 10, 7, 4, 7, 3, 8, 3, 9, 8, 10, 10, 6, 1, 8, 10, 10, 6, 10, 3, 3, 7, 8, 3, 1, 7, 2, 3, 8, 5, 3, 7, 8, 9, 6, 4, 3, 5, 5, 3, 7, 7, 4, 2, 8, 2, 9, 8, 3, 7, 4, 5, 3, 9, 8, 1, 1, 4, 6, 4, 10, 10, 8, 8, 1, 4, 1, 7, 3, 4, 1, 2, 10, 3, 1, 5, 4, 6, 2, 7, 10, 9, 4, 2, 5, 9, 9, 3, 4, 1, 10, 6, 8, 1, 4, 2, 1, 7, 6, 3, 2, 1, 2, 9, 5, 5, 7, 4, 5, 2, 1, 3, 7, 5, 1, 8, 7, 10, 7, 3, 4, 5, 8, 3, 5, 3, 8, 3, 7, 8, 9, 10, 1, 9, 1, 5, 7, 2, 10, 9, 10, 3, 5, 7, 9, 5, 6, 3, 10, 1, 5, 6, 9, 8, 1, 5, 6, 8, 3, 4, 9, 4, 6, 7, 7, 8, 1, 1, 10, 8, 7, 8, 9, 10, 3, 2, 10, 7, 5, 9, 6, 8, 4, 10, 2, 10, 6, 10, 2, 7, 10, 7, 1, 8, 6, 4, 1, 6, 6, 6, 1, 1, 7, 1, 3, 7, 8, 9, 6, 3, 2, 4, 6, 2, 6, 10, 5, 1, 6, 4, 2, 10, 9, 5, 1, 10, 4, 8, 4, 4, 10, 3, 10, 9, 4, 4, 6, 10, 8, 9, 6, 6, 1, 8, 4, 8, 2, 5, 4, 2, 9, 1, 1, 1, 2, 8, 9, 6, 6, 1, 1, 1, 4, 5, 9, 3, 10, 9, 8, 10, 10, 7, 1, 9, 9, 7, 4, 10, 7, 3, 7, 3, 7, 9, 3, 8, 4, 5, 3, 4, 10, 3, 8, 8, 8, 9, 3, 2, 5, 8, 3, 6, 3, 8, 7, 6, 4, 9, 9, 8, 10, 7, 4, 3, 8, 2, 3, 9, 8, 10, 8, 3, 2, 2, 4, 5, 10, 2, 3, 2, 7, 1, 4, 5, 3, 4, 5, 1, 4, 1, 9, 3, 9, 9, 10, 1, 5, 8, 6, 2, 1, 9, 6, 8, 4, 1, 6, 6, 6, 3, 1, 8, 1, 10, 1, 3, 5, 2, 1, 3, 8, 9, 1, 4, 3, 6, 3, 6, 10, 6, 9, 2, 8, 9, 5, 5, 3, 4, 10, 2, 2, 4, 4, 6, 9, 2, 2, 8, 8, 8, 3, 4, 10, 6, 9, 7, 5, 9, 1, 1, 3, 3, 1, 10, 7, 3, 10, 2, 5, 4, 5, 6, 2, 2, 10, 10, 5, 9, 8, 1, 3, 7, 4, 2, 10, 9, 6, 1, 9, 9, 6, 3, 9, 3, 8, 7, 10, 8, 2, 8, 8, 10, 9, 4, 10, 9, 8, 7, 10, 6, 4, 4, 8, 9, 2, 5, 1, 2, 1, 3, 2, 3, 2, 4, 6, 3, 3, 5, 10, 9, 5, 2, 5, 6, 10, 2, 2, 2, 4, 5, 8, 7, 6, 2, 5, 5, 8, 7, 9, 4, 2, 5, 3, 4, 8, 10, 2, 4, 3, 2, 1, 9, 10, 8, 8, 5, 3, 9, 4, 7, 3, 7, 2, 3, 7, 4, 1, 5, 5, 4, 8, 8, 10, 7, 8, 3, 2, 2, 3, 4, 2, 2, 3, 7, 9, 6, 9, 10, 3, 4, 4, 3, 4, 5, 6, 2, 6, 8, 6, 6, 7, 2, 1, 8, 4, 10, 4, 3, 10, 7, 4, 6, 1, 4, 4, 1, 5, 4, 9, 9, 4, 3, 4, 3, 7, 9, 2, 9, 1, 9, 10, 10, 8, 2, 6, 2, 3, 9, 2, 9, 10, 5, 4, 2, 4, 1, 9, 3, 4, 1, 9, 8, 10, 3, 9, 2, 10, 2, 10, 9, 6, 7, 1, 8, 9, 7, 3, 8, 4, 2, 4, 5, 10, 8, 4, 4, 4, 4, 9, 10, 5, 6, 10, 1, 9, 9, 7, 9, 2, 9, 2, 10, 9, 7, 2, 7, 4, 2, 8, 4, 8, 2, 1, 4, 7, 2, 6, 4, 1, 6, 9, 4, 7, 1, 6, 6, 4, 5, 8, 3, 2, 6, 5, 4, 4, 1, 8, 8, 1, 10, 4, 8, 8, 7, 2, 8, 1, 2, 2, 8, 8, 1, 7, 8, 10, 6, 2, 2, 4, 7, 1, 3, 8, 7, 10, 7, 9, 8, 4, 10, 6, 6, 4, 10, 10, 1, 2, 6, 3, 3, 4, 4, 2, 1, 4, 10, 8, 6, 4, 6, 3, 6, 9, 4, 9, 3, 9, 9, 7, 3, 10, 6, 9, 2, 9, 3, 3, 6, 7, 8, 10, 5, 5, 10, 5, 8, 7, 9, 5, 10, 9, 8, 5, 3, 6, 9, 6, 6, 2, 4, 7, 4, 3, 1, 6, 8, 1, 2, 4, 10, 10, 5, 5, 2, 4, 4, 8, 1, 8, 1, 5, 2, 5, 1, 10, 2, 1, 1, 5, 8, 1, 6, 7, 8, 2, 2, 6, 3, 7, 1, 1, 9, 8, 10, 1, 1, 4, 2, 2, 9, 2, 1, 9, 4, 8, 8, 5, 8, 9, 9, 9, 8, 10, 1, 3, 3, 9, 6, 1, 8, 10, 9, 5, 8, 9, 6, 8, 10, 1, 4, 10, 5, 2, 6, 1, 8, 7, 3, 3, 4, 3, 4, 6, 7, 10, 5, 6, 3, 3, 9, 1, 5, 10, 4, 1, 8, 10, 1, 7, 3, 3, 10, 7, 5, 4, 7, 7, 9, 4, 5, 10, 10, 6, 3, 3, 3, 3, 7, 4, 3, 3, 4, 6, 4, 7, 3, 6, 2, 10, 3, 6, 3, 10, 1, 3, 9, 3, 8, 3, 6, 3, 10, 4, 6, 2, 6, 7, 4, 10, 6, 8, 4, 5, 5, 4, 8, 5, 10, 3, 4, 1, 9, 3, 7, 2, 9, 5, 5, 6, 3, 2, 7, 6, 4, 4, 3, 7, 6, 5, 9, 1, 6, 7, 7, 10, 1, 6, 3, 6, 4, 1, 4, 2, 2, 7, 3, 8, 9, 7, 3, 3, 6, 6, 6, 8, 10, 2, 2, 10, 5, 1, 6, 2, 8, 3, 10, 9, 6, 10, 5, 1, 1, 3, 5, 8, 7, 2, 3, 5, 3, 3, 7, 1, 9, 7, 4, 5, 4, 3, 1, 2, 6, 6, 3, 1, 6, 3, 1, 1, 7, 2, 9, 9, 3, 9, 10, 5, 3, 1, 8, 5, 6, 9, 2, 7, 3, 3, 9, 9, 5, 8, 9, 10, 3, 2, 6, 2, 6, 10, 2, 8, 9, 10, 4, 2, 4, 10, 5, 10, 10, 8, 1, 8, 4, 7, 2, 6, 3, 8, 3, 7, 1, 1, 4, 7, 3, 9, 9, 7, 7, 9, 5, 4, 1, 2, 10, 9, 8, 5, 8, 2, 4, 5, 2, 2, 2, 8, 6, 4, 8, 7, 8, 9, 10, 3, 7, 1, 3, 3, 6, 4, 3, 9, 4, 9, 9, 9, 3, 1, 5, 7, 6, 1, 6, 8, 1, 3, 7, 4, 3, 10, 3, 5, 2, 8, 2, 1, 5, 3, 4, 10, 1, 8, 3, 7, 8, 2, 9, 7, 2, 3, 3, 1, 2, 4, 8, 10, 3, 8, 9, 2, 1, 5, 9, 6, 9, 6, 9, 10, 2, 3, 5, 5, 8, 4, 5, 2, 3, 7, 10, 1, 1, 3, 6, 1, 4, 2, 9, 9, 10, 1, 8, 9, 7, 9, 6, 7, 5, 8, 6, 3, 8, 4, 7, 6, 5, 6, 1, 10, 8, 4, 9, 6, 9, 5, 4, 4, 3, 10, 9, 6, 6, 2, 10, 4, 5, 3, 5, 9, 6, 1, 9, 9, 2, 5, 7, 7, 8, 8, 3, 6, 10, 10, 1, 3, 6, 9, 9, 3, 8, 10, 1, 7, 2, 8, 9, 5, 3, 5, 1, 2, 8, 2, 7, 1, 7, 8, 4, 2, 9, 1, 1, 5, 5, 10, 7, 1, 2, 4, 10, 7, 7, 3, 3, 10, 1, 5, 7, 3, 3, 2, 9, 9, 1, 1, 2, 3, 9, 9, 1, 9, 5, 6, 3, 4, 7, 5, 5, 10, 2, 10, 9, 1, 2, 8, 2, 8, 5, 7, 2, 2, 5, 3, 1, 8, 3, 10, 10, 2, 5, 10, 6, 7, 2, 3, 7, 9, 9, 4, 3, 7, 7, 9, 7, 5, 4, 9, 9, 9, 10, 1, 9, 2, 9, 3, 2, 10, 5, 2, 10, 5, 3, 1, 3, 10, 2, 9, 10, 1, 8, 7, 8, 2, 7, 4, 8, 8, 4, 9, 1, 1, 4, 1, 9, 1, 8, 5, 6, 10, 1, 9, 2, 4, 2, 2, 5, 6, 6, 5, 2, 8, 6, 10, 1, 5, 6, 9, 9, 4, 10, 8, 8, 6, 6, 3, 4, 6, 9, 5, 10, 7, 7, 3, 5, 6, 7, 5, 2, 7, 1, 6, 2, 4, 2, 8, 1, 1, 5, 6, 10, 3, 7, 3, 10, 2, 3, 2, 1, 1, 3, 2, 5, 5, 6, 9, 4, 7, 8, 4, 10, 1, 3, 2, 6, 3, 5, 6, 6, 8, 6, 2, 10, 5, 5, 7, 8, 7, 9, 8, 5, 8, 8, 10, 4, 9, 9, 5, 5, 9, 3, 5, 8, 2, 6, 7, 9, 2, 1, 3, 5, 3, 5, 1, 2, 10, 5, 3, 1, 5, 8, 5, 6, 8, 4, 2, 2, 5, 10, 1, 7, 3, 7, 6, 6, 9, 8, 3, 9, 7, 9, 10, 3, 1, 9, 7, 6, 5, 10, 2, 5, 7, 1, 8, 5, 2, 1, 5, 3, 9, 7, 7, 1, 2, 1, 9, 5, 4, 6, 7, 7, 1, 9, 7, 7, 9, 3, 9, 4, 4, 6, 4, 4, 5, 3, 1, 10, 8, 10, 1, 3, 3, 6, 9, 3, 10, 10, 2, 10, 5, 1, 7, 6, 8, 3, 5, 5, 2, 7, 5, 10, 2, 4, 4, 1, 3, 10, 6, 9, 10, 6, 5, 3, 1, 8, 8, 7, 3, 2, 9, 8, 8, 9, 9, 6, 10, 3, 1, 7, 6, 7, 9, 8, 4, 6, 1, 3, 6, 10, 8, 8, 5, 10, 4, 3, 8, 6, 7, 7, 3, 9, 5, 6, 3, 8, 4, 2, 4, 5, 7, 6, 6, 2, 3, 8, 2, 10, 3, 3, 5, 1, 1, 9, 9, 7, 3, 7, 8, 8, 2, 7, 9, 2, 3, 9, 9, 7, 10, 5, 10, 3, 2, 1, 4, 4, 8, 10, 7, 1, 6, 1, 4, 8, 5, 2, 2, 5, 2, 4, 9, 8, 7, 2, 2, 2, 3, 4, 6, 4, 1, 7, 5, 8, 7, 5, 6, 5, 5, 8, 4, 6, 5, 6, 8, 8, 4, 7, 7, 10, 6, 8, 7, 9, 6, 9, 8, 5, 10, 6, 8, 5, 8, 6, 1, 6, 4, 3, 6, 10, 7, 8, 10, 7, 2, 4, 5, 5, 9, 2, 4, 6, 8, 10, 10, 6, 3, 4, 7, 5, 4, 6, 1, 10, 9, 2, 1, 10, 6, 4, 4, 8, 2, 9, 6, 5, 3, 9, 2, 1, 6, 5, 6, 8, 2, 5, 9, 7, 5, 6, 1, 10, 10, 9, 1, 7, 2, 7, 8, 7, 8, 1, 9, 1, 5, 5, 3, 5, 8, 4, 5, 5, 1, 4, 5, 3, 5, 8, 4, 2, 7, 2, 1, 10, 7, 8, 8, 2, 8, 6, 10, 1, 6, 2, 3, 1, 5, 9, 4, 1, 9, 5, 5, 7, 7, 3, 2, 6, 6, 5, 7, 9, 8, 6, 8, 9, 6, 10, 1, 1, 3, 6, 2, 9, 9, 1, 6, 3, 10, 9, 5, 6, 4, 2, 9, 5, 2, 8, 6, 3, 3, 8, 8, 9, 10, 3, 2, 4, 9, 8, 8, 3, 5, 9, 7, 8, 8, 3, 4, 3, 10, 10, 3, 4, 7, 10, 7, 3, 10, 9, 1, 10, 3, 8, 9, 5, 1, 5, 1, 1, 7, 2, 1, 7, 8, 6, 6, 6, 7, 8, 9, 8, 9, 10, 5, 4, 9, 4, 3, 3, 10, 10, 4, 9, 1, 2, 4, 5, 9, 6, 4, 1, 9, 3, 9, 2, 5, 2, 2, 5, 3, 7, 4, 1, 1, 7, 7, 9, 7, 5, 6, 9, 2, 2, 2, 10, 6, 5, 4, 3, 7, 7, 1, 1, 1, 7, 5, 9, 10, 3, 10, 8, 5, 4, 7, 4, 1, 10, 6, 8, 10, 6, 1, 5, 4, 3, 8, 5, 6, 8, 5, 10, 4, 8, 3, 1, 8, 4, 9, 3, 7, 6, 6, 10, 5, 10, 10, 5, 8, 5, 10, 2, 1, 8, 2, 7, 5, 4, 7, 5, 3, 9, 1, 10, 1, 6, 7, 4, 1, 3, 2, 2, 3, 9, 5, 1, 2, 3, 1, 2, 10, 1, 2, 2, 4, 6, 10, 3, 9, 10, 10, 8, 5, 10, 6, 3, 4, 1, 7, 9, 3, 8, 2, 9, 8, 8, 2, 4, 5, 4, 4, 10, 2, 2, 10, 1, 7, 2, 9, 7, 2, 7, 4, 9, 9, 2, 4, 8, 3, 9, 2, 10, 2, 1, 7, 6, 6, 9, 8, 7, 1, 4, 8, 7, 1, 2, 4, 6, 6, 3, 8, 7, 4, 3, 1, 9, 9, 8, 10, 6, 6, 6, 5, 1, 8, 3, 6, 7, 4, 9, 4, 6, 10, 4, 3, 5, 4, 1, 7, 5, 8, 1, 1, 10, 2, 2, 8, 6, 1, 9, 2, 9, 9, 4, 1, 9, 2, 3, 3, 7, 8, 10, 2, 1, 2, 3, 6, 4, 5, 8, 1, 2, 3, 5, 1, 4, 10, 3, 6, 9, 6, 1, 10, 7, 7, 4, 7, 7, 10, 2, 1, 2, 8, 1, 1, 10, 7, 8, 4, 2, 2, 9, 7, 8, 9, 1, 9, 5, 4, 7, 1, 4, 9, 1, 8, 9, 1, 8, 2, 5, 6, 1, 7, 7, 9, 4, 8, 7, 2, 2, 8, 3, 1, 3, 9, 5, 9, 4, 7, 4, 1, 6, 6, 5, 5, 5, 4, 2, 1, 3, 5, 7, 2, 1, 10, 6, 3, 1, 10, 5, 5, 10, 1, 8, 5, 10, 3, 2, 2, 6, 5, 4, 5, 2, 5, 10, 8, 10, 9, 8, 5, 1, 8, 8, 5, 1, 1, 9, 8, 1, 4, 7, 2, 3, 5, 7, 10, 2, 3, 4, 4, 10, 4, 9, 5, 8, 8, 1, 1, 4, 5, 7, 5, 2, 8, 3, 8, 5, 4, 9, 3, 4, 7, 6, 10, 10, 3, 4, 6, 8, 4, 9, 8, 4, 4, 5, 3, 9, 10, 10, 3, 2, 4, 6, 7, 3, 2, 7, 10, 5, 2, 7, 10, 7, 1, 4, 8, 8, 3, 3, 4, 2, 2, 10, 7, 7, 3, 2, 7, 7, 2, 4, 4, 7, 6, 7, 8, 4, 8, 4, 7, 8, 5, 9, 9, 10, 1, 9, 1, 5, 8, 7, 4, 9, 8, 3, 2, 4, 3, 7, 9, 5, 6, 6, 7, 8, 9, 8, 4, 10, 5, 6, 4, 4, 3, 7, 1, 3, 6, 8, 8, 8, 8, 9, 8, 3, 9, 6, 4, 8, 4, 7, 7, 10, 3, 7, 5, 8, 8, 10, 9, 3, 9, 6, 8, 9, 6, 6, 2, 8, 3, 1, 3, 3, 4, 1, 1, 1, 2, 4, 3, 10, 6, 10, 10, 2, 6, 1, 1, 4, 7, 7, 6, 10, 8, 5, 3, 9, 8, 8, 2, 6, 7, 3, 1, 7, 8, 4, 5, 7, 7, 8, 5, 5, 3, 8, 7, 4, 8, 4, 5, 9, 1, 2, 1, 5, 9, 5, 10, 7, 2, 2, 7, 5, 4, 7, 7, 2, 3, 4, 2, 1, 1, 7, 1, 2, 2, 10, 4, 10, 6, 8, 1, 10, 9, 10, 10, 4, 3, 2, 2, 3, 8, 10, 10, 2, 1, 7, 9, 3, 10, 3, 1, 1, 5, 5, 4, 3, 7, 3, 10, 4, 9, 6, 10, 10, 6, 10, 4, 9, 4, 6, 4, 9, 2, 10, 7, 4, 7, 6, 3, 7, 6, 10, 6, 5, 4, 8, 1, 2, 8, 1, 4, 9, 9, 7, 2, 5, 1, 5, 5, 4, 6, 1, 10, 10, 3, 5, 8, 5, 3, 2, 6, 7, 9, 6, 3, 7, 1, 8, 1, 2, 2, 2, 1, 7, 9, 2, 3, 4, 2, 6, 3, 5, 7, 7, 4, 1, 10, 6, 4, 3, 8, 4, 8, 6, 10, 5, 10, 1, 7, 3, 6, 3, 10, 6, 9, 9, 9, 6, 9, 3, 10, 5, 9, 4, 2, 9, 2, 9, 3, 1, 1, 10, 10, 4, 5, 5, 3, 1, 2, 7, 5, 1, 5, 1, 2, 4, 10, 1, 1, 3, 5, 7, 5, 2, 1, 3, 10, 10, 3, 9, 5, 6, 9, 2, 4, 3, 1, 9, 6, 5, 2, 3, 5, 3, 9, 3, 7, 7, 8, 9, 5, 9, 8, 2, 5, 10, 9, 4, 9, 7, 7, 8, 4, 10, 2, 7, 3, 8, 10, 1, 1, 7, 1, 8, 2, 5, 10, 3, 3, 3, 2, 9, 7, 4, 3, 7, 3, 9, 4, 10, 5, 10, 4, 1, 6, 9, 1, 1, 6, 1, 2, 8, 1, 7, 9, 3, 7, 2, 3, 2, 8, 8, 6, 5, 5, 1, 10, 4, 6, 1, 8, 6, 10, 1, 5, 3, 1, 4, 1, 8, 8, 1, 9, 5, 2, 6, 5, 4, 8, 3, 5, 9, 5, 7, 2, 3, 2, 5, 8, 3, 6, 8, 7, 2, 7, 8, 9, 7, 10, 3, 2, 8, 5, 2, 3, 9, 7, 7, 6, 10, 6, 2, 4, 7, 2, 3, 1, 8, 7, 3, 4, 7, 10, 10, 2, 5, 7, 8, 7, 9, 7, 6, 2, 3, 10, 10, 8, 9, 9, 2, 4, 5, 3, 9, 9, 1, 4, 5, 3, 6, 4, 5, 3, 4, 4, 5, 3, 5, 4, 2, 9, 9, 4, 4, 1, 5, 3, 2, 8, 2, 3, 9, 1, 4, 9, 5, 7, 8, 2, 8, 8, 6, 3, 9, 3, 10, 7, 4, 8, 6, 10, 7, 4, 2, 9, 3, 1, 9, 4, 9, 1, 10, 2, 6, 3, 9, 6, 3, 6, 3, 5, 7, 9, 10, 5, 5, 8, 2, 9, 3, 1, 1, 4, 1, 9, 2, 2, 4, 1, 7, 5, 8, 3, 4, 4, 4, 10, 5, 10, 4, 1, 5, 4, 10, 10, 6, 6, 1, 2, 1, 1, 10, 5, 10, 6, 8, 4, 6, 2, 4, 5, 4, 8, 7, 3, 1, 10, 2, 1, 8, 6, 10, 5, 1, 3, 4, 7, 5, 5, 3, 3, 10, 10, 5, 8, 8, 3, 2, 6, 7, 5, 1, 7, 10, 10, 4, 4, 4, 10, 4, 5, 2, 2, 3, 2, 6, 5, 7, 9, 7, 3, 8, 10, 6, 4, 3, 6, 3, 2, 1, 2, 3, 2, 5, 8, 8, 3, 1, 10, 3, 2, 4, 4, 1, 7, 8, 7, 7, 4, 3, 6, 5, 8, 8, 8, 7, 7, 3, 4, 5, 9, 5, 9, 1, 8, 4, 10, 2, 2, 6, 2, 1, 10, 9, 5, 9, 4, 4, 9, 9, 2, 2, 8, 10, 5, 10, 1, 8, 6, 5, 2, 8, 3, 3, 9, 9, 6, 1, 7, 10, 4, 5, 4, 6, 7, 10, 5, 6, 4, 5, 2, 1, 9, 9, 6, 6, 2, 9, 4, 7, 9, 4, 2, 2, 5, 7, 8, 6, 9, 5, 4, 2, 3, 1, 1, 7, 1, 9, 9, 6, 6, 7, 3, 7, 2, 5, 8, 9, 3, 3, 5, 9, 4, 6, 5, 5, 8, 4, 9, 7, 5, 2, 7, 6, 4, 8, 10, 9, 2, 6, 5, 3, 4, 2, 7, 6, 7, 4, 2, 5, 5, 3, 9, 10, 1, 1, 9, 3, 9, 1, 4, 9, 1, 2, 10, 8, 1, 5, 8, 1, 8, 1, 7, 3, 1, 6, 2, 2, 4, 8, 8, 4, 7, 1, 9, 9, 10, 4, 6, 1, 7, 10, 3, 1, 1, 9, 8, 2, 4, 7, 1, 6, 1, 9, 9, 10, 4, 9, 9, 2, 9, 2, 4, 10, 9, 3, 2, 8, 7, 5, 7, 9, 1, 4, 10, 6, 5, 2, 7, 2, 8, 10, 10, 5, 8, 1, 8, 4, 8, 2, 1, 10, 10, 3, 8, 9, 8, 9, 5, 2, 6, 1, 10, 6, 1, 1, 10, 5, 6, 2, 9, 6, 2, 6, 8, 3, 2, 7, 2, 10, 6, 4, 5, 1, 2, 5, 8, 1, 1, 7, 8, 7, 10, 9, 5, 4, 10, 7, 8, 6, 3, 1, 10, 6, 4, 10, 7, 10, 1, 1, 5, 2, 10, 7, 4, 10, 10, 8, 5, 6, 5, 9, 5, 10, 9, 7, 7, 7, 1, 6, 1, 10, 2, 9, 7, 6, 9, 7, 4, 7, 8, 2, 4, 5, 3, 3, 2, 8, 10, 9, 8, 1, 3, 6, 3, 2, 5, 3, 2, 8, 2, 4, 9, 9, 2, 9, 1, 8, 6, 9, 4, 6, 6, 9, 7, 2, 1, 8, 9, 2, 9, 4, 10, 1, 8, 3, 5, 8, 4, 7, 6, 7, 6, 5, 3, 8, 7, 4, 5, 4, 10, 7, 8, 8, 1, 10, 8, 3, 6, 4, 2, 7, 6, 3, 10, 4, 2, 1, 10, 1, 6, 8, 8, 9, 7, 7, 10, 1, 8, 2, 1, 5, 6, 10, 8, 7, 10, 3, 4, 9, 8, 5, 2, 2, 5, 7, 9, 9, 6, 6, 5, 8, 4, 6, 2, 5, 1, 2, 2, 9, 9, 9, 10, 1, 7, 10, 8, 6, 10, 4, 7, 9, 5, 2, 2, 8, 1, 1, 6, 2, 1, 10, 10, 8, 10, 9, 8, 5, 3, 4, 2, 8, 7, 9, 1, 7, 7, 6, 9, 9, 7, 8, 5, 5, 10, 9, 7, 6, 1, 3, 2, 6, 8, 6, 10, 2, 2, 9, 2, 1, 2, 8, 9, 1, 7, 7, 8, 10, 5, 8, 6, 5, 1, 4, 1, 3, 7, 5, 9, 9, 3, 9, 2, 7, 8, 2, 10, 3, 6, 6, 10, 3, 2, 8, 2, 10, 1, 2, 9, 10, 2, 10, 10, 8, 2, 4, 1, 7, 1, 9, 2, 4, 5, 6, 10, 2, 9, 3, 6, 7, 3, 10, 9, 3, 1, 1, 5, 8, 1, 8, 9, 6, 9, 8, 4, 9, 10, 4, 3, 9, 1, 7, 9, 2, 9, 4, 4, 7, 4, 8, 2, 10, 1, 8, 2, 5, 9, 10, 6, 8, 2, 1, 8, 1, 1, 4, 4, 3, 6, 2, 7, 1, 9, 6, 10, 10, 1, 4, 9, 10, 10, 9, 1, 5, 3, 4, 1, 1, 9, 3, 7, 7, 9, 4, 4, 5, 10, 10, 1, 9, 6, 5, 10, 5, 4, 3, 9, 2, 10, 8, 1, 1, 6, 5, 3, 4, 2, 2, 10, 9, 10, 10, 2, 2, 2, 4, 1, 6, 3, 7, 4, 4, 10, 2, 9, 9, 5, 8, 10, 5, 4, 10, 3, 10, 1, 4, 2, 4, 9, 9, 9, 5, 2, 2, 8, 2, 2, 3, 1, 2, 10, 9, 7, 3, 10, 3, 3, 3, 3, 5, 10, 10, 3, 1, 7, 9, 1, 6, 8, 6, 5, 1, 10, 2, 5, 4, 2, 2, 10, 5, 3, 9, 3, 3, 7, 1, 3, 1, 6, 2, 9, 5, 2, 10, 5, 3, 9, 6, 1, 8, 9, 6, 2, 8, 8, 3, 8, 6, 10, 7, 6, 10, 1, 5, 8, 2, 9, 7, 3, 4, 7, 1, 2, 1, 5, 9, 2, 5, 7, 9, 5, 5, 7, 7, 9, 4, 9, 6, 9, 7, 7, 2, 9, 3, 3, 4, 5, 10, 5, 2, 9, 4, 3, 10, 5, 5, 1, 4, 3, 2, 5, 10, 7, 4, 4, 7, 10, 9, 3, 10, 6, 3, 9, 5, 7, 3, 6, 5, 3, 10, 6, 10, 8, 4, 4, 8, 8, 7, 7, 9, 6, 2, 6, 5, 9, 9, 8, 5, 5, 5, 9, 5, 8, 1, 7, 7, 1, 4, 6, 5, 2, 5, 1, 4, 7, 8, 10, 1, 2, 10, 4, 7, 5, 1, 5, 3, 5, 10, 9, 8, 2, 10, 1, 5, 3, 10, 10, 2, 10, 10, 10, 8, 1, 3, 6, 6, 9, 7, 5, 3, 4, 9, 4, 1, 2, 7, 8, 8, 2, 3, 9, 9, 8, 5, 10, 1, 2, 10, 1, 5, 9, 10, 8, 3, 1, 6, 2, 9, 10, 3, 1, 7, 3, 4, 6, 10, 7, 3, 9, 9, 10, 10, 8, 1, 1, 1, 4, 7, 5, 6, 9, 10, 4, 8, 8, 10, 2, 3, 4, 7, 7, 6, 7, 3, 6, 6, 5, 1, 5, 2, 2, 4, 6, 7, 1, 9, 4, 5, 9, 6, 3, 10, 8, 4, 8, 10, 7, 6, 7, 7, 7, 9, 8, 7, 3, 10, 9, 6, 7, 2, 6, 10, 5, 2, 1, 3, 10, 6, 8, 10, 8, 4, 5, 6, 9, 1, 5, 1, 9, 5, 5, 6, 7, 10, 3, 1, 10, 8, 7, 6, 7, 7, 2, 9, 9, 7, 5, 2, 5, 6, 6, 3, 1, 7, 3, 9, 8, 10, 5, 2, 10, 8, 5, 7, 4, 1, 10, 6, 2, 7, 7, 2, 8, 7, 3, 9, 2, 6, 9, 3, 1, 9, 1, 10, 6, 1, 6, 8, 4, 1, 8, 7, 4, 3, 6, 10, 2, 10, 6, 4, 9, 9, 3, 7, 9, 2, 5, 3, 3, 2, 6, 1, 9, 6, 5, 4, 5, 6, 1, 4, 2, 3, 4, 8, 9, 6, 9, 3, 6, 7, 7, 4, 4, 8, 2, 10, 4, 10, 3, 8, 4, 7, 1, 8, 5, 7, 9, 3, 6, 10, 3, 3, 10, 1, 6, 6, 8, 1, 5, 6, 4, 7, 9, 8, 5, 4, 6, 7, 9, 2, 9, 6, 1, 5, 7, 5, 2, 2, 1, 7, 10, 1, 1, 5, 7, 6, 2, 7, 10, 4, 6, 5, 2, 3, 2, 1, 6, 2, 2, 3, 8, 8, 8, 4, 9, 4, 5, 10, 3, 4, 7, 5, 2, 10, 10, 3, 4, 5, 8, 4, 5, 7, 9, 4, 3, 2, 6, 1, 1, 8, 4, 5, 4, 3, 5, 4, 10, 8, 10, 5, 9, 3, 10, 7, 5, 3, 9, 8, 10, 1, 10, 8, 9, 10, 5, 2, 6, 9, 8, 2, 1, 5, 5, 7, 1, 3, 3, 4, 8, 1, 2, 2, 5, 8, 8, 4, 10, 1, 8, 3, 9, 3, 2, 9, 10, 9, 8, 8, 6, 6, 2, 7, 4, 1, 10, 5, 1, 6, 9, 3, 3, 7, 4, 1, 5, 10, 10, 2, 6, 8, 6, 2, 10, 9, 7, 1, 10, 8, 3, 3, 6, 3, 9, 1, 6, 6, 7, 2, 9, 1, 9, 9, 5, 5, 7, 4, 7, 8, 3, 7, 10, 4, 10, 7, 6, 6, 1, 10, 2, 9, 2, 5, 6, 1, 4, 2, 6, 1, 9, 9, 6, 2, 8, 3, 1, 2, 2, 4, 6, 9, 3, 9, 7, 4, 8, 3, 7, 2, 4, 3, 8, 2, 5, 2, 2, 3, 4, 8, 10, 8, 9, 4, 5, 1, 10, 7, 2, 6, 6, 10, 7, 2, 8, 4, 5, 8, 5, 1, 8, 6, 6, 10, 8, 8, 3, 5, 7, 10, 6, 4, 2, 10, 8, 4, 2, 9, 7, 7, 8, 4, 7, 3, 1, 6, 5, 1, 2, 9, 5, 5, 8, 4, 5, 7, 3, 1, 5, 4, 10, 2, 10, 2, 3, 4, 9, 2, 10, 7, 10, 4, 9, 9, 10, 7, 5, 4, 2, 7, 7, 10, 5, 7, 3, 9, 3, 10, 7, 4, 5, 4, 2, 4, 9, 10, 3, 2, 4, 2, 8, 8, 7, 5, 5, 7, 4, 4, 9, 7, 5, 9, 10, 7, 1, 2, 10, 1, 9, 1, 7, 5, 3, 2, 4, 9, 3, 5, 6, 2, 8, 6, 10, 5, 9, 10, 8, 1, 2, 5, 8, 10, 4, 3, 1, 6, 1, 5, 2, 7, 5, 2, 9, 9, 3, 2, 10, 10, 2, 10, 9, 10, 2, 9, 3, 6, 5, 7, 1, 1, 5, 2, 7, 10, 5, 2, 3, 1, 4, 8, 1, 9, 3, 2, 1, 4, 2, 5, 7, 7, 3, 7, 6, 10, 7, 4, 2, 2, 5, 5, 7, 5, 9, 2, 4, 6, 4, 5, 6, 2, 2, 2, 4, 6, 7, 7, 5, 8, 1, 9, 4, 2, 9, 2, 1, 2, 6, 7, 6, 1, 9, 10, 7, 5, 3, 2, 8, 7, 1, 9, 8, 3, 3, 2, 2, 9, 3, 1, 9, 5, 2, 1, 3, 6, 4, 4, 8, 2, 10, 5, 5, 2, 4, 3, 1, 3, 10, 2, 7, 1, 3, 9, 10, 6, 8, 10, 2, 5, 8, 9, 2, 4, 9, 5, 3, 1, 9, 7, 4, 8, 8, 4, 4, 3, 6, 2, 3, 7, 1, 1, 4, 3, 6, 10, 2, 9, 6, 8, 10, 7, 10, 7, 3, 8, 3, 2, 5, 9, 4, 1, 1, 10, 6, 10, 2, 7, 9, 5, 1, 7, 3, 1, 8, 5, 2, 9, 2, 2, 3, 3, 6, 8, 7, 9, 2, 9, 8, 1, 3, 4, 5, 6, 3, 2, 5, 7, 5, 8, 5, 1, 4, 7, 10, 6, 1, 10, 8, 7, 3, 6, 9, 8, 8, 7, 7, 8, 2, 9, 8, 4, 10, 6, 9, 2, 1, 8, 2, 7, 1, 3, 10, 7, 3, 1, 7, 3, 7, 4, 2, 3, 5, 10, 9, 1, 3, 5, 2, 3, 4, 9, 1, 2, 9, 8, 8, 9, 7, 5, 9, 6, 1, 2, 4, 7, 7, 1, 3, 5, 8, 6, 4, 7, 10, 8, 9, 9, 7, 7, 10, 5, 9, 2, 2, 1, 4, 8, 10, 9, 6, 9, 3, 6, 1, 8, 6, 9, 2, 9, 5, 5, 2, 5, 2, 4, 3, 3, 7, 9, 6, 5, 4, 5, 9, 10, 1, 3, 2, 4, 1, 8, 2, 3, 8, 7, 1, 2, 10, 6, 2, 5, 8, 7, 7, 2, 2, 8, 4, 9, 4, 1, 1, 2, 10, 5, 8, 4, 3, 7, 6, 7, 3, 4, 9, 1, 2, 1, 3, 5, 4, 4, 9, 7, 9, 5, 8, 4, 6, 1, 9, 8, 10, 1, 9, 8, 8, 7, 4, 9, 3, 4, 8, 9, 4, 5, 3, 2, 10, 7, 7, 2, 6, 1, 5, 8, 8, 5, 5, 10, 8, 6, 2, 5, 4, 8, 9, 4, 7, 5, 8, 7, 4, 1, 3, 3, 2, 3, 8, 4, 9, 5, 5, 2, 4, 10, 3, 6, 4, 1, 10, 9, 10, 2, 2, 10, 10, 7, 8, 2, 8, 9, 3, 7, 4, 8, 8, 5, 8, 5, 5, 5, 7, 2, 7, 2, 7, 10, 4, 4, 4, 5, 6, 2, 1, 7, 9, 8, 9, 6, 2, 1, 9, 6, 4, 5, 10, 9, 5, 4, 6, 7, 8, 9, 1, 9, 5, 3, 5, 1, 5, 8, 7, 6, 8, 6, 6, 5, 7, 9, 4, 4, 7, 3, 9, 8, 5, 4, 4, 2, 5, 10, 6, 5, 2, 4, 10, 6, 3, 8, 4, 3, 6, 5, 4, 4, 8, 6, 4, 5, 7, 1, 3, 9, 4, 4, 4, 7, 9, 6, 10, 5, 7, 6, 7, 10, 1, 2, 1, 5, 6, 4, 6, 7, 9, 9, 5, 8, 5, 1, 5, 5, 7, 2, 9, 6, 9, 3, 10, 6, 5, 6, 4, 2, 6, 3, 1, 6, 3, 3, 5, 5, 5, 2, 7, 1, 10, 10, 9, 1, 6, 3, 8, 1, 1, 10, 1, 4, 10, 6, 2, 4, 5, 4, 6, 6, 4, 8, 7, 9, 9, 9, 1, 9, 8, 10, 9, 7, 4, 8, 7, 5, 8, 1, 1, 8, 6, 7, 8, 3, 1, 5, 6, 9, 5, 4, 5, 7, 3, 4, 6, 3, 1, 2, 9, 1, 6, 9, 3, 8, 10, 1, 4, 7, 7, 5, 4, 1, 2, 7, 7, 9, 5, 7, 3, 3, 7, 4, 1, 8, 9, 2, 4, 4, 3, 2, 8, 10, 9, 3, 9, 3, 5, 3, 7, 9, 8, 2, 9, 4, 1, 10, 7, 3, 3, 1, 6, 5, 7, 8, 1, 6, 1, 1, 1, 10, 5, 9, 1, 9, 6, 7, 9, 4, 9, 4, 1, 1, 8, 10, 2, 7, 8, 3, 1, 2, 2, 5, 4, 9, 8, 6, 2, 1, 9, 6, 6, 10, 2, 1, 1, 6, 2, 5, 9, 5, 2, 2, 10, 5, 5, 8, 3, 3, 9, 8, 5, 6, 8, 3, 10, 5, 9, 10, 3, 3, 7, 2, 7, 10, 6, 7, 7, 5, 10, 2, 3, 7, 2, 1, 9, 9, 8, 3, 7, 2, 2, 6, 6, 4, 10, 2, 6, 2, 8, 2, 7, 5, 8, 6, 10, 8, 9, 7, 2, 3, 6, 7, 2, 8, 4, 3, 9, 5, 8, 6, 6, 6, 10, 7, 9, 10, 7, 8, 9, 9, 8, 4, 4, 4, 3, 9, 3, 9, 4, 6, 4, 3, 3, 9, 8, 1, 6, 8, 6, 10, 9, 5, 6, 4, 1, 8, 4, 7, 1, 9, 7, 2, 10, 1, 5, 5, 1, 5, 2, 3, 7, 6, 8, 5, 10, 3, 3, 2, 10, 1, 9, 5, 4, 2, 4, 3, 7, 5, 4, 4, 5, 4, 6, 7, 5, 7, 5, 4, 5, 5, 3, 2, 4, 4, 7, 4, 3, 2, 5, 3, 5, 3, 10, 7, 2, 6, 3, 3, 4, 7, 7, 7, 2, 1, 6, 7, 9, 3, 7, 7, 9, 3, 8, 1, 8, 10, 7, 4, 3, 5, 4, 1, 1, 2, 8, 2, 5, 2, 3, 8, 8, 1, 10, 9, 2, 9, 1, 8, 6, 1, 6, 5, 2, 2, 8, 3, 1, 2, 4, 6, 5, 3, 3, 9, 4, 3, 1, 10, 8, 10, 5, 5, 5, 3, 1, 2, 6, 10, 4, 5, 6, 10, 2, 5, 3, 6, 1, 4, 7, 8, 3, 7, 5, 9, 2, 1, 1, 10, 5, 4, 8, 10, 3, 10, 9, 3, 4, 10, 1, 9, 9, 6, 6, 8, 2, 3, 6, 10, 3, 6, 7, 1, 10, 7, 10, 10, 5, 3, 10, 3, 5, 6, 6, 9, 3, 8, 1, 7, 10, 9, 3, 6, 10, 3, 8, 8, 1, 9, 3, 5, 1, 2, 9, 6, 10, 1, 3, 1, 10, 6, 9, 10, 1, 9, 8, 8, 2, 3, 4, 7, 5, 7, 1, 8, 6, 3, 10, 5, 8, 7, 9, 10, 4, 7, 5, 7, 8, 1, 10, 4, 5, 2, 7, 8, 10, 2, 1, 10, 10, 3, 3, 1, 3, 2, 2, 2, 2, 1, 3, 9, 8, 9, 4, 8, 10, 3, 1, 6, 8, 9, 6, 4, 9, 2, 10, 3, 4, 3, 8, 9, 5, 9, 10, 3, 1, 1, 9, 7, 4, 1, 7, 10, 7, 3, 10, 8, 6, 2, 2, 10, 1, 8, 4, 3, 10, 8, 6, 4, 4, 7, 3, 2, 7, 10, 3, 5, 10, 5, 8, 6, 7, 5, 2, 10, 4, 4, 7, 9, 4, 1, 10, 8, 5, 3, 3, 4, 2, 10, 7, 9, 1, 10, 7, 5, 4, 4, 6, 5, 10, 4, 3, 2, 3, 4, 3, 5, 4, 7, 1, 8, 9, 10, 1, 6, 2, 5, 3, 5, 9, 5, 10, 8, 9, 10, 3, 5, 10, 1, 5, 6, 3, 8, 10, 6, 2, 6, 10, 9, 8, 10, 6, 2, 1, 3, 8, 7, 2, 8, 9, 5, 9, 2, 3, 1, 5, 6, 7, 10, 9, 8, 7, 9, 2, 9, 2, 3, 8, 9, 3, 10, 5, 7, 4, 2, 9, 5, 9, 2, 1, 4, 10, 6, 6, 1, 10, 1, 8, 5, 6, 9, 8, 9, 4, 10, 7, 3, 5, 4, 8, 2, 5, 2, 3, 3, 1, 7, 4, 1, 1, 1, 6, 10, 10, 4, 9, 8, 4, 6, 3, 2, 1, 1, 1, 9, 6, 8, 8, 4, 9, 9, 2, 2, 10, 1, 7, 5, 3, 10, 10, 9, 6, 9, 9, 7, 8, 4, 8, 6, 9, 7, 1, 1, 10, 1, 2, 2, 10, 9, 5, 5, 1, 1, 8, 5, 10, 2, 10, 2, 8, 2, 9, 1, 8, 10, 9, 2, 5, 6, 1, 3, 7, 6, 2, 4, 6, 10, 1, 4, 8, 6, 1, 6, 10, 4, 8, 9, 9, 8, 3, 10, 4, 9, 4, 3, 3, 7, 1, 7, 3, 2, 4, 5, 5, 5, 9, 5, 6, 7, 9, 4, 5, 1, 10, 10, 9, 1, 6, 1, 2, 1, 1, 9, 9, 4, 10, 2, 9, 6, 4, 10, 7, 4, 9, 5, 5, 7, 8, 2, 10, 7, 6, 9, 7, 3, 7, 4, 5, 2, 7, 8, 9, 8, 9, 2, 7, 9, 3, 3, 7, 8, 5, 1, 2, 4, 5, 6, 5, 10, 9, 5, 7, 5, 8, 9, 2 };


    int app1 = 0;
    int app2 = 0;
    int app3 = 0;
    int app4 = 0;
    int app5 = 0;

    for (int  x = 0 ; x < aantal ; ++x)  	// Doe nu tig-keer "iets".
    {
        int  r = numbers[x];

        if (objecten.empty()				// Als we nog niets hebben of
                || r > 7 )					// we kiezen voor ruimte aanvragen
        {

           r = kiesServlet(numbers[x - 1]); // hulp methode die kiest welke servlet gebruikt wordt

            switch (r)
            {
            case 1: // wachtwoord vergeten
                vraagGeheugen(2);
                cout << "wachtwoord vergeten (5)" << endl;
                app1++;
                break;
            case 2: // nieuwe klant registreren
                vraagGeheugen(4);
                cout << "wachtwoord vergeten (10)" << endl;
                app2++;
                break;
            case 3: // geld overmaken
                vraagGeheugen(5);
                cout << "geld overmaken" << endl;
                app3++;
                break;
            case 4: // hypotheek afsluiten
                vraagGeheugen(8);
                cout << "hypotheek afsluiten" << endl;
                app4++;
                break;
            case 5: // betaling via iDeal
                vraagGeheugen(10);
                cout << "betaling via iDeal" << endl;
                app5++;
                break;
            }
        }
        else if (r  < 3)  			 					// Anders: vrijgeven mits ...
        {
            if (!objecten.empty())  			// ... we iets hebben
            {
                vergeetRandom();				// sluit een random servlet
                cout << "random servlet afgesloten" << endl;
            }
            // else
            // dan doen we een keer niets
        }
        else
        {
            //  cout << "do nothing" << endl;
            // deze keer gebeurt er niets
        }
    }
    klok.stop();			// -----------------------------------	// -----------------------------------

    klok.report();			// Vertel alle tijden
    beheerder->report();	// en de geheugenbeheer statistieken

    // Evaluatie
    if ((oom_teller > 0) || (err_teller > 0) )  	// some errors
    {
        cout << AC_RED "De allocater faalde " << oom_teller << " keer";
        cout << " en maakte " << err_teller << " fouten\n" AA_RESET;
    }
    else  										// no problems
    {
        cout << AC_GREEN "De allocater faalde " << oom_teller << " keer";
        cout << " en maakte " << err_teller << " fouten\n" AA_RESET;
    }

    cout << "app1 aantal: " << app1 << endl;
    cout << "app2 aantal: " << app2 << endl;
    cout << "app3 aantal: " << app3 << endl;
    cout << "app4 aantal: " << app4 << endl;
    cout << "app5 aantal: " << app5 << endl;



    this->vflag = old_vflag; // turn on verbose output again

}


int FakeApplication::kiesServlet(int nummer)
{
    cout << "het nummer " << nummer << endl;
    if (nummer == 1 || nummer == 2)
    {
        return 1;
    }
    else if (nummer == 3 || nummer == 4)
    {
        return 2;
    }
    else if (nummer == 5 || nummer == 6)
    {
        return 3;
    }
    else if (nummer == 7 || nummer == 8)
    {
        return 4;
    }
    else
    {
        return 5;
    }
}

// =========== BEHEER MODULE METEN =============

// Deze methode doet "zomaar" wat onzin acties.
// Bedenk zelf een andere methode die wat zinnigers doet.
void	FakeApplication::randomscenario(int aantal, bool vflag)
{
    bool old_vflag = this->vflag;
    this->vflag = vflag;	// verbose mode aan/uit

    oom_teller = 0;			// reset failure counter
    err_teller = 0;			// reset error counter

    // Door srand hier aan te roepen met een "seed" waarde
    // krijg je altijd een herhaling van hetzelfde scenario.
    // Je kan elke seed waarde dan zien als de code voor "een scenario".
    // Handig voor het testen/meten, maar bedenk wel dat deze scenario's
    // nooit gelijkwaardig zijn aan het gedrag van een echt systeem.
    srand(1);   // (zie: man 3 rand)

    // Nu komt het eigenlijke werk:
    Stopwatch  klok;		// Een stopwatch om de tijd te meten
    klok.start();			// -----------------------------------
    for (int  x = 0 ; x < aantal ; ++x)  	// Doe nu tig-keer "iets".
    {
        int  r = rand();					// Gooi de dobbelsteen
        if (objecten.empty()				// Als we nog niets hebben of
                || vraagkans(r) )					// we kiezen voor ruimte aanvragen
        {
            r = rand();						// Gooi de dobbelsteen nog eens
            r %= (size / 100);				// maximaal 1% van alles
            vraagGeheugen(r + 1);			// maar minstens 1 eenheid
        }
        else								// Anders: vrijgeven mits ...
            if (!objecten.empty())  			// ... we iets hebben
            {
                //vergeetOudste();				// geef het oudste gebied weer terug
                vergeetRandom();				// geef een gebied weer terug
            }
        // else
        // dan doen we een keer niets
    }
    klok.stop();			// -----------------------------------

    klok.report();			// Vertel alle tijden
    beheerder->report();	// en de geheugenbeheer statistieken

    // Evaluatie
    if ((oom_teller > 0) || (err_teller > 0) )  	// some errors
    {
        cout << AC_RED "De allocater faalde " << oom_teller << " keer";
        cout << " en maakte " << err_teller << " fouten\n" AA_RESET;
    }
    else  										// no problems
    {
        cout << AC_GREEN "De allocater faalde " << oom_teller << " keer";
        cout << " en maakte " << err_teller << " fouten\n" AA_RESET;
    }

    this->vflag = old_vflag; // turn on verbose output again
}


// =========== BEHEER MODULE TESTEN ==========

// Elke test die hieronder uitgevoerd wordt zou een 'assert' failure
// moeten veroorzaken die de normale executie-volgorde afbreekt.

void	FakeApplication::testing()
{
    Area  *ap = 0;

    tflag = true;		// Zet de sanity-check in 'vraagGeheugen' even uit.

    err_teller = 0;		// Reset the Error teller.
    oom_teller = 0;		// Reset the Out-Of-Memory teller.

    int	 failed_steps = 0;
    int  fase = 0;		// Houdt bij hoe ver we zijn in de test procedure.

    // Na elke 'test' komen we weer "hier" terug voor de volgende test.
    while (fase >= 0)
    {
        try
        {
            cerr << "Stap " << (++fase) << ":\n";
            switch (fase)
            {
            case 1:
                cerr << "Om niets vragen ...\n";
                vraagGeheugen(0);   // dit mag niet kunnen ...
                // ... dus hier zouden we niet mogen komen ...
                cerr << AC_RED"TEST FAILED"AA_RESET"\n"; // ... maar de controle heeft gefaald
                ++failed_steps;
                cerr << "Stap " << (++fase) << ":\n";
        /*FALLTHRU*/						// ga door naar de volgende test
            case 2:
                cerr << "Te veel vragen ...\n";
                vraagGeheugen(size + 1);
                cerr << AC_RED"TEST FAILED"AA_RESET"\n"; // controle heeft gefaald
                ++failed_steps;
                cerr << "Stap " << (++fase) << ":\n";
        /*FALLTHRU*/						// ga door naar de volgende test
            case 3:
                cerr << "Te weinig vragen ...\n";
                vraagGeheugen(-1);
                cerr << AC_RED"TEST FAILED"AA_RESET"\n";
                ++failed_steps;
                cerr << "Stap " << (++fase) << ":\n";
            /*FALLTHRU*/
            case 4:
                cerr << "Om alles vragen ...\n";
                ++failed_steps;
                vraagGeheugen(size);   			// PAS OP: dit mag dus wel!
                --failed_steps;
                cerr << AC_GREEN"OKE, TEST SUCCEEDED"AA_RESET"\n";
                cerr << "Stap " << (++fase) << ":\n";
            /*FALLTHRU*/
            case 5:
                cerr << "Ruimte weer vrijgeven ...\n";
                ++failed_steps;
                vergeetOudste(); 		// geheugen van stap 4 weer vrijgeven
                --failed_steps;
                cerr << AC_GREEN"OKE, TEST SUCCEEDED"AA_RESET"\n"; // Zou geen problemen mogen geven
                cerr << "Stap " << (++fase) << ":\n";
            /*FALLTHRU*/
            case 6:
                cerr << "Een gebied twee keer vrijgeven ...\n";
                // Vraag om geheugen
                ap = beheerder->alloc(size / 2);	// dit moet altijd kunnen
                {
                    cerr<<"print 1 "<<(ap)<<endl;
                    Area *bp = new Area(*ap);			// dupliceer ap
                    cerr<<"print 2"<<endl;
                    beheerder->free(ap);				// weer vrij geven
                    beheerder->free(bp);				// en nog eens vrij geven
                    // NB This test may cause a memory leak if 'beheerder->free' did not delete 'bp'
                }
                cerr << AC_RED"TEST FAILED"AA_RESET"\n";
                ++failed_steps;
            //cerr << "Stap " << ( ++fase ) << ":\n";
            /*FALLTHRU*/
            // Voeg zonodig nog andere testcases toe
            default:
                if (failed_steps > 0)
                    cerr << AC_GREEN"Einde code testen "AC_RED"with "<<failed_steps<<" errors"AA_RESET"\n";
                else
                    cerr << AC_GREEN"Einde code testen, alles OKE"AA_RESET"\n";
                fase = -1;		// einde test loop
                tflag = false;	// Puur "voor het geval dat"
                break;
            }
        }
        catch (const std::logic_error& error)
        {
            cerr << error.what();
            cerr << AC_GREEN"OKE, TEST SUCCEEDED"AA_RESET"\n";
        }
    }
}


// vim:sw=4:ai:aw:ts=4:
